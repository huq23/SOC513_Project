---
title: "Organize Data Notebook"
---

```{r}
#| label: setup
#| include: false
library(here)
source(here("utils","check_packages.R"))
source(here("utils","functions.R"))

library(readxl)
library(tidyverse)
library(dplyr)
library(glue)
library(purrr)
library(jsonlite)
library(rvest)

```

This quarto doc is used to organize the data.


```{r}

#replace this with your API key
api_key <- "GTduvcsi2bUZ7EE3bqlYxR3nIRsdBWJvfy1ngJsJ"

# choose starting and ending year
start_year <- 2017
end_year <- 2019

url_base <- "https://api.usa.gov/crime/fbi/cde/estimate/state/{state_abbr}/{type}?from={start_year}&to={end_year}&API_KEY={api_key}"

crime_data <- as_tibble(expand.grid(state_abbr=c(state.abb, "DC"),
                                    type=c("violent-crime","property-crime")))

urls <- crime_data |> glue_data(url_base)

rates <- map_dfr(urls, function(url) {
  results <- (curl::curl(url) %>% read_html() %>% html_nodes("p") %>%
                html_text %>% fromJSON)$results[1] %>%
    bind_rows()
  return(results)
})

crime_data <- bind_cols(crime_data, rates)

# now reshape
crime_data <- crime_data |>
  pivot_longer(cols = c(`2017`,`2018`,`2019`),
               names_to = "year", values_to = "rate")

# now reshape again to get violent and property on the same line
crime_data <- crime_data |>
  mutate(type = str_remove(type, "-crime")) |>
  pivot_wider(id_cols = c(state_abbr, year), names_from = type, values_from = rate)


```



```{r, warning=FALSE, message=FALSE}

# Define a function to process each year's dataset
process_acs_data <- function(file_path, year) {
  acs_data <- read_xlsx(file_path)
  
  acs_first <- acs_data[, 1]
  acs_even <- acs_data[, seq(2, ncol(acs_data), by = 2)]

  acs_combined <- cbind(acs_first, acs_even)
  colnames(acs_combined)[1] <- "states"
  
  acs_combined <- acs_combined[c(100, 185, 237, 283), ]
  
  transposed_acs <- t(acs_combined)

  acs_df <- as.data.frame(transposed_acs)
  acs_df$states <- rownames(acs_df)
  
  # Clean up the data frame
  rownames(acs_df) <- NULL
  colnames(acs_df) <- c("lhs", "unemploy_rate", "median_income", "poverty_rate", "State")
  acs_df <- acs_df[-1, ]
  acs_df$year <- year

  acs_df <- convert_columns_to_numeric(acs_df)
  
  return(acs_df)
}

# Function to convert relevant columns to numeric
convert_columns_to_numeric <- function(df) {
  df$median_income <- as.numeric(gsub("[^0-9.]", "", as.character(df$median_income)))
  df$unemploy_rate <- as.numeric(gsub("%", "", as.character(df$unemploy_rate)))
  df$poverty_rate <- as.numeric(gsub("%", "", as.character(df$poverty_rate)))
  df$lhs <- as.numeric(gsub("%", "", as.character(df$lhs)))
  return(df)
}


acs2017 <- process_acs_data("data/data_raw/ACS/ACS2017.xlsx", 2017)
acs2018 <- process_acs_data("data/data_raw/ACS/ACS2018.xlsx", 2018)
acs2019 <- process_acs_data("data/data_raw/ACS/ACS2019.xlsx", 2019)


combined_acs <- bind_rows(acs2017, acs2018, acs2019)


# Define a function to add state abbreviations based on state names
add_state_abbr <- function(df) {
  state_map <- setNames(state.abb, tolower(state.name))
  df$state_abbr <- state_map[tolower(df$State)]
  
  return(df)
}

combined_acs <- add_state_abbr(combined_acs)


```

```{r}

process_acs_data <- function(file_path, year) {
  
  acs_data <- read.csv(file_path, skip = 1)
  
  acs_data <- acs_data |>
  rename(pop_over25             = SE_A12001_001,
         pop_over25_lhs         = SE_A12001_002,
         pop_over16             = SE_A17005_001,
         pop_over16_umemploy    =  SE_A17005_003,
         Avg_income             = SE_A14011_001,
         families               = SE_A13002_001,
         families_below_poverty = SE_A13002_002,
         State                  = Geo_NAME)     |>
    
  select(pop_over25, pop_over25_lhs, 
         pop_over16, pop_over16_umemploy, 
         Avg_income, families_below_poverty, families, State  )

  
 acs_data <- acs_data |>
  group_by(State) |>
  summarise( pct_lhs            = 100 * (pop_over25_lhs / pop_over25),
             pct_unemploy       = 100 * (pop_over16_umemploy / pop_over16),
             pct_below_poverty  = 100 * (families_below_poverty/ families),
             avg_income         = mean(Avg_income, na.rm = TRUE)
             )
 

  acs_data$year <- year
  
  return(acs_data)

  }

acs2017 <- process_acs_data("data/data_raw/ACS/R13682541_SL040.csv", 2017)
acs2018 <- process_acs_data("data/data_raw/ACS/R13682540_SL040.csv", 2018)
acs2019 <- process_acs_data("data/data_raw/ACS/R13682536_SL040.csv", 2019)

combined_acs <- bind_rows(acs2017, acs2018, acs2019)



add_state_abbr <- function(df) {
  
  state_map <- setNames(state.abb, tolower(state.name))
  df$state_abbr <- state_map[tolower(df$State)]
  
  return(df)
 
  }


combined_acs <- add_state_abbr(combined_acs)



```



```{r}
merged_data <- merge(crime_data, combined_acs)

save(merged_data, file = here("data","data_constructed","merged_data.RData"))

load(here("data","data_constructed","merged_data.RData"))

```





